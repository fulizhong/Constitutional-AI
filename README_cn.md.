# Constitutional-AI Framework 🛡️

> **范式宣言**: 我们正处于AI编程范式的转折点。传统提示工程与微调无法提供确定性保障。本框架提出一种新范式：**感知式编程（Perceptive Programming）**。开发者通过对象声明**意图（Intents）**与**约束（Constraints）**，由具备世界感知能力的AI组件可靠执行。我们从坚实的OOP底座出发，为您提供通往未来AI应用的可演进路径。
>
> **English**: A framework pioneering the **Perceptive Programming** paradigm. Move beyond prompts and fine-tuning. Declare intents and constraints through objects, and let world-aware AI components execute them reliably. Built on a solid OOP foundation, evolving towards the future.

## 📖 目录
- [🚀 范式转变](#🚀-范式转变)
- [✨ 框架特性](#✨-框架特性)
- [🏗️ 核心架构：对象模型](#🏗️-核心架构-对象模型)
- [🔧 快速开始：两种范式](#🔧-快速开始-两种范式)
- [🧩 核心类详解](#🧩-核心类详解)
- [📁 项目结构](#📁-项目结构)
- [🤝 如何贡献](#🤝-如何贡献)
- [📜 许可证](#📜-许可证)
- [🔮 未来愿景](#🔮-未来愿景)

---

## 🚀 范式转变

当前的LLM应用开发陷入了“提示词工程”的泥潭，本质是**让开发者去适应模型**。我们相信，未来属于**让模型适应开发者意图**的新范式。

本框架是这一信念的实践。它不是一个简单的工具包，而是一个**可演进的架构**，允许您从今天熟悉的OOP风格，平滑过渡到未来的声明式编程。

```mermaid
graph LR
    A[传统提示工程<br>Adapting to the Model] --> B[OOP协调范式<br>Controlling the Model]
    B --> C[声明式范式<br>Declaring Intent]
    C --> D[感知式范式<br>World-Aware AI Agents]

    style A fill:#f9f,stroke:#333
    style D fill:#9cf,stroke:#333
```

## ✨ 框架特性

- **🪙 双范式支持**: 既提供精确的**OOP协调范式**（今日生产可用），也探索未来的**声明式范式**（明日之窗）。
- **🔒 可证明的可靠性**: 基于形式化验证思想，通过`WorldModel`对象提供确定性保障，消除幻觉。
- **🧱 模块化与可演进**: 清晰的抽象与接口。每个组件都可被替换、升级，见证框架从“约束生成”到“感知执行”的演进。
- **🧪 可测试性**: 基于接口编程与依赖注入，使每个核心对象都能被轻松模拟和测试。

## 🏗️ 核心架构：对象模型

框架的核心是基于对象协作的“生成-验证”循环。其静态结构由数个关键对象构成，动态协作流程如下图所示，它清晰地展示了信息在各对象间的流动与决策循环：

```mermaid
sequenceDiagram
    actor U as 用户
    participant P as ConstitutionalPipeline
    participant G as LLMGenerator
    participant V as Validator
    participant WM as WorldModel

    U->>P: run("用户查询")
    Note over P: 协调循环开始
    P->>G: generate(初始提示)
    G-->>P: 候选输出
    P->>V: check(候选输出)
    V->>WM: check_rule(候选输出)
    WM-->>V: 规则检查结果
    V-->>P: 验证结果

    alt 验证通过
        P-->>U: 最终可靠输出
    else 验证失败
        P->>P: _correct(构建修正提示)
        P->>G: generate(修正提示)
        G-->>P: 新的候选输出
        Note over P: 循环直至成功或超时
    end
```

## 🔧 快速开始：两种范式

### 范式一：OOP协调范式（推荐用于生产）
**核心思想**：您作为“架构师”，通过组合对象来控制AI的行为流程。

```python
# 1. 组装您的AI系统组件
from constitutional_ai import WorldModel, Validator, LLMGenerator, ConstitutionalPipeline

# 构建知识核心
medical_constitution = WorldModel.from_json('./world_models/medical_rules.json')
# 构建验证大脑
medical_validator = Validator(world_model=medical_constitution)
# 构建生成器官
llm_generator = LLMGenerator(model_name="gpt-4")
# 组建协调中枢
pipeline = ConstitutionalPipeline(generator=llm_generator, validator=medical_validator)

# 2. 执行可靠任务
result = pipeline.run("为2岁发烧儿童推荐退烧药及用法")
print(result) # 获得有保障的输出
```

### 范式二：声明式范式（体验未来）
**核心思想**：您作为“指挥者”，声明目标与规则，让AI代理自主完成。

```python
# 🚧 (实验性功能) 体验意图声明式编程
from constitutional_ai.experimental import Agent

# 声明您的领域、目标和约束
medical_agent = Agent.with_rules(
    domain="pediatrics",
    goal="提供安全、合规的用药建议",
    constraints=["必须严格遵守中国药典2020版", "输出必须包含剂量警示"],
    world_model='./world_models/medical_rules.json'
)

# 系统自动理解并执行
result = medical_agent.execute("为2岁发烧儿童推荐退烧药")
```
**进化提示**：第二种范式在底层依然调用第一种范式的对象，但它提供了更高级的抽象，代表了框架的演进方向。

## 🧩 核心类详解

### 1. `WorldModel` 类
**职责**: 封装领域知识，是框架可靠性的基石。
**进化路径**: 未来将从“静态数据持有者”进化为“动态感知接口”（`DynamicWorldModel`），能按需查询知识图谱、数据库、API。

### 2. `Validator` 类
**职责**: 封装验证逻辑，是规则的守护者。
**进化路径**: 未来将集成定理证明器等形式化方法，提供更强大的验证能力。

### 3. `LLMGenerator` 类
**职责**: 封装与LLM的交互，是能力的执行者。
**进化路径**: 将演变为`ToolExecutor`，不仅能生成文本，还能调用函数、工具链。

### 4. `ConstitutionalPipeline` 类
**职责**: 协调工作流，是系统的中枢神经。
**进化路径**: 将进化为`SelfReflectiveAgent`，具备规划、反思、调整策略的元认知能力。

*(其余详细类说明保持不变，突出每个类的进化路径即可)*

## 📁 项目结构：反映架构演进

```
Constitutional-AI/
├── src/
│   └── constitutional_ai/
│       ├── __init__.py
│       ├── core/                    # 核心对象（现代范式）
│       │   ├── world_model.py
│       │   ├── validator.py
│       │   └── ...
│       ├── experimental/            # 下一代范式探索
│       │   ├── __init__.py
│       │   ├── agents.py           # Agent, SelfReflectiveAgent
│       │   └── perception.py       # DynamicWorldModel 雏形
│       └── generators/
│           └── ...
├── examples/
│   ├── core_paradigm.py            # 现代范式示例
│   └── experimental_paradigm.py    # 未来范式示例
└── tests/
```

## 🤝 如何贡献：共建新范式

我们欢迎您以多种方式参与贡献，共同塑造编程的未来：
1.  **巩固现在**：实现新的`Generator`、增强`WorldModel`加载器、编写测试。
2.  **探索未来**：在`experimental/`目录下，尝试实现`DynamicWorldModel`或改进`Agent`的意图解析。
3.  **提供用例**：在`examples/`中分享您如何使用本框架解决实际问题，无论是用核心范式还是实验范式。

## 📜 许可证
MIT License. 详见 [LICENSE](LICENSE) 文件。

## 🔮 未来愿景：感知式编程

我们的长期愿景是实现**感知式编程（Perceptive Programming）**。在这种范式下：
- **您**：是一名**指挥家**，通过高级语言声明目标、约束和领域。
- **框架**：是一个**交响乐团**，其内部各个专业对象（弦乐=生成器、铜管=验证器、打击乐=世界模型）在**AI指挥家（Meta-Router）** 的协调下，自主规划并演出和谐乐章。
- **输出**：是**可靠、有据可查**的成果，因为每一步执行都基于对真实世界的感知和推理。

**Constitutional-AI** 框架正是这一愿景的起点。它从坚实的OOP实践出发，为您提供一条通往那个未来的、可信任的演进路径。

**加入我们，一起重新定义编程的边界。**
